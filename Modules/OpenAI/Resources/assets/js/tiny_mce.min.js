"use strict";

tinymce.init({
    selector: "textarea#basic-example",
    statusbar: false,
    menubar: false,
    promotion: false,
    contextmenu: false,
    content_style: "body{color:#4E4E4EFF}",  // Set text color
    toolbar: false,
    plugins: [
        "advlist",
        "autolink",
        "lists",
        "link",
        "image",
        "charmap",
        "preview",
        "anchor",
        "searchreplace",
        "visualblocks",
        "code",
        "fullscreen",
        "insertdatetime",
        "media",
        "table",
    ],
    toolbar: "bold italic backcolor | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | undo redo | blocks forecolor | removeformat | ",
    content_css: "../../Modules/OpenAI/Resources/assets/css/rtl.min.css",

    init_instance_callback: function (editor) {
        var lang = document.documentElement.getAttribute("lang");

        function applyTextAlignmentBasedOnLanguage() {
            let currentContent = editor.getContent();

            // Convert Markdown to HTML
            let htmlContent = marked(currentContent);

            // Apply text alignment based on language
            if (lang === "ar") {
                // Set content with RTL class for Arabic
                editor.setContent(`<div class="rtl-text">${htmlContent}</div>`);
            } else {
                // Remove any existing RTL wrapping
                editor.setContent(htmlContent.replace(/<div class="rtl-text">|<\/div>/g, ""));
            }
        }

        // Call the function to apply the content based on language
        applyTextAlignmentBasedOnLanguage();
    },

    formats: {
        bold: { inline: 'strong' }
    },

    convert_fonts_to_spans: true
});

// Example usage to set initial content
let markdownStream = `
## Title
**This is bold text**
- Bullet point 1
- Bullet point 2
`;

tinymce.get("basic-example").setContent(markdownStream); // Set initial Markdown content
